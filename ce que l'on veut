Comment on veut que le backend fonctionne.

On veut que le frontend stock dans le backend un fichier de configuration au format "timestamp_config.json"
on veut que le frontend stock dans le backend un fichier csv identique à l'import au format "nom-du-csv_uuid"

ca on l'a déjà.

maintenant on veut un cronjob qui scan tout les 2minutes le dossier depuis la racine FilesDropped/ConfigFiles/ et qui analyse chaque fichiers .json contenu dans le dossier l'element insertionTime.

Si insertionTime est dépassé par rapport à la date actuel(Date.now())ET que hasbeenInserted === false alors, on effectue la tache du backend en prenant en entrée le fichier de configuration en cours d'analyse par le cronjob ET le fichier dont le nom se trouve dans le fichier racine FilesDropped/CsvFiles/${config.parameters.filePath}

exemple: 

fichier FilesDropped/ConfigFiles/1727181851253_config.json :

{
  "csvImported": {
    "Nom": "test_nom",
    "Prenom": "test_prenom",
    "id": "test_uuid"
  },
  "parameters": {
    "filePath": "chargeur_TEST_Dev_fb280d94-f5a3-4811-b3e0-de906a818850.csv",
    "ficheType": "epargnant",
    "dedoublonageKey": "pierre",
    "title": "QSDFGH_fb280d94-f5a3-4811-b3e0-de906a818850",
    "noHeaders": false,
    "create_clients": true,
    "modify_clients": false,
    "dedoublonage": false,
    "trim_spaces": false,
    "casseChange_columns": false,
    "validate_fields": false,
    "keep_first_row": false,
    "keep_last_row": true
  },
  "regex": {},
  "insertionTime": "2024-01-01T00:00",
  "timestamp_tracker": 1727181851221,
  "hasbeenInserted": false,
  "configFile": ""
}


et le fichier FilesDroped/CsvFiles/chargeur_TEST_Dev_fb280d94-f5a3-4811-b3e0-de906a818850.csv



de cette facon nous voulons deporté le traitement effectué par le backend à la date defini par le fichier de configuration plutôt que d'agir immediatement